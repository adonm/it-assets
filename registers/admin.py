from datetime import datetime
from django.conf import settings
from django.contrib import messages
from django.contrib.admin import register, ModelAdmin, StackedInline, SimpleListFilter
from django.core.mail import EmailMultiAlternatives
from django.urls import path
from pytz import timezone

from itassets.utils import ModelDescMixin
from .models import ITSystem, ChangeLog
from .views import ChangeRequestExport


@register(ITSystem)
class ITSystemAdmin(ModelDescMixin, ModelAdmin):

    class PlatformFilter(SimpleListFilter):
        """SimpleListFilter to filter on True/False if an object has a value for platform.
        """
        title = 'platform'
        parameter_name = 'platform_boolean'

        def lookups(self, request, model_admin):
            return (
                ('true', 'Present'),
                ('false', 'Absent'),
            )

        def queryset(self, request, queryset):
            if self.value() == 'true':
                return queryset.filter(platform__isnull=False)
            if self.value() == 'false':
                return queryset.filter(platform__isnull=True)

    model_description = ITSystem.__doc__
    list_display = (
        'system_id',
        'name',
        'status',
        'cost_centre',
        'owner',
        'technology_custodian',
        'information_custodian',
        'seasonality',
        'availability',
    )
    list_filter = (
        'status', 'system_type', 'availability', 'seasonality', 'recovery_category', PlatformFilter,
        'infrastructure_location',
    )
    search_fields = (
        'system_id', 'owner__email', 'name', 'acronym', 'description',
        'technology_custodian__email', 'link', 'documentation',
        'cost_centre__code',
    )
    readonly_fields = (
        'system_id', 'name', 'link', 'status', 'owner', 'technology_custodian', 'information_custodian',
        'availability', 'seasonality', 'description',
    )
    raw_id_fields = (
        'owner', 'technology_custodian', 'information_custodian', 'cost_centre', 'bh_support', 'ah_support')
    fieldsets = [
        ('Overview', {
            'description': '<span class="errornote">Data in these fields is maintained in SharePoint.</span>''',
            'fields': (
                'system_id',
                'name',
                'link',
                'status',
                'owner',
                'technology_custodian',
                'information_custodian',
                'availability',
                'seasonality',
                'description',
            )
        }),
        ('Technical information', {
            'description': '<span class="errornote">Data in these fields is used for OIM reporting purposes.</span>',
            'fields': (
                'bh_support',
                'ah_support',
                'cost_centre',
                'system_type',
                'infrastructure_location',
                'backups',
                'recovery_category',
                'emergency_operations',
                'online_bookings',
                'visitor_safety',
            ),
        }),
        ('Retention and disposal', {
            'description': '<span class="errornote">Data in these fields is used to record how long that data generated by the system should be retained for.</span>',
            'fields': (
                'defunct_date',
                'retention_reference_no',
                'disposal_action',
                'custody',
                'retention_comments',
            ),
        }),
    ]
    # Override the default change_list.html template:
    change_list_template = 'admin/registers/itsystem/change_list.html'
    save_on_top = True

    def has_change_permission(self, request, obj=None):
        # The point of truth for IT Systems is now Sharepoint, therefore adding new objects here is disallowed.
        return False

    def has_add_permission(self, request):
        # The point of truth for IT Systems is now Sharepoint, therefore adding new objects here is disallowed.
        return False

    def has_delete_permission(self, request, obj=None):
        # The point of truth for IT Systems is now Sharepoint, therefore deleting objects here is disallowed.
        return False


class StandardChangeAdmin(ModelAdmin):
    date_hierarchy = 'created'
    filter_horizontal = ('it_systems',)
    list_display = ('id', 'name', 'endorser', 'expiry')
    raw_id_fields = ('endorser',)
    search_fields = ('id', 'name', 'endorser__email')

    def has_change_permission(self, request, obj=None):
        # The point of truth for RFCs is now Freshservice, therefore adding new objects here is disallowed.
        return False

    def has_add_permission(self, request):
        # The point of truth for RFCs is now Freshservice, therefore adding new objects here is disallowed.
        return False

    def has_delete_permission(self, request, obj=None):
        # The point of truth for RFCs is now Freshservice, therefore adding new objects here is disallowed.
        return False


class ChangeLogInline(StackedInline):
    model = ChangeLog
    extra = 0
    fields = ('created', 'log')
    readonly_fields = ('created',)


class CompletionListFilter(SimpleListFilter):
    """A custom list filter to restrict displayed RFCs by completion status.
    """
    title = 'completion'
    parameter_name = 'completion'

    def lookups(self, request, model_admin):
        return (
            ('Complete', 'Complete'),
            ('Incomplete', 'Incomplete')
        )

    def queryset(self, request, queryset):
        if self.value() == 'Complete':
            return queryset.filter(completed__isnull=False)
        if self.value() == 'Incomplete':
            return queryset.filter(completed__isnull=True)


def email_endorser(modeladmin, request, queryset):
    """A custom admin action to (re)send an email to the endorser, requesting that they endorse an RFC.
    """
    for rfc in queryset:
        if rfc.is_submitted:
            rfc.email_endorser()
            msg = 'Request for approval emailed to {}.'.format(rfc.endorser.name)
            log = ChangeLog(change_request=rfc, log=msg)
            log.save()
            messages.success(request, msg)


email_endorser.short_description = 'Send email to the endorser requesting endorsement of a change'


def email_requester(modeladmin, request, queryset):
    """A custom admin action to (re)send email to the requester, asking that they record completion.
    """
    for rfc in queryset:
        if rfc.status == 3 and rfc.planned_end <= datetime.now().astimezone(timezone(settings.TIME_ZONE)) and rfc.completed is None:
            rfc.email_requester()
            msg = 'Request for completion record-keeping emailed to {}.'.format(rfc.requester.name)
            log = ChangeLog(change_request=rfc, log=msg)
            log.save()
            messages.success(request, msg)


email_requester.short_description = 'Send email to the requester to record completion of a finished change'


def cab_approve(modeladmin, request, queryset):
    """A custom admin action to bulk-approve RFCs at CAB.
    """
    for rfc in queryset:
        if rfc.is_scheduled:
            # Set the RFC status and record a log.
            rfc.status = 3
            rfc.save()
            msg = 'Change request {} has been approved at CAB; it may now be carried out as planned.'.format(rfc.pk)
            log = ChangeLog(change_request=rfc, log=msg)
            log.save()
            # Send an email to the requester.
            subject = 'Change request {} has been approved at CAB'.format(rfc.pk)
            detail_url = request.build_absolute_uri(rfc.get_absolute_url())
            text_content = """This is an automated message to let you know that change request
                {} ("{}") has been approved at CAB and may now be carried out as planned.\n
                Following completion, rollback or cancellation, please visit the following URL
                and record the outcome of the change:\n
                {}\n
                """.format(rfc.pk, rfc.title, detail_url)
            html_content = """<p>This is an automated message to let you know that change request
                {0} ("{1}") has been approved at CAB and may now be carried out as planned.</p>
                <p>Following completion, rollback or cancellation, please visit the following URL
                and record the outcome of the change:</p>
                <ul><li><a href="{2}">{2}</a></li></ul>
                """.format(rfc.pk, rfc.title, detail_url)
            msg = EmailMultiAlternatives(subject, text_content, settings.NOREPLY_EMAIL, [rfc.requester.email])
            msg.attach_alternative(html_content, 'text/html')
            msg.send()
            # Success notification.
            msg = 'RFC {} status set to "Ready"; requester has been emailed.'.format(rfc.pk)
            messages.success(request, msg)


cab_approve.short_description = 'Mark selected change requests as approved at CAB'


def cab_reject(modeladmin, request, queryset):
    """A custom admin action to reject RFCs at CAB.
    """
    for rfc in queryset:
        if rfc.is_scheduled:
            # Set the RFC status and record a log.
            rfc.status = 0
            rfc.save()
            msg = 'Change request {} has been rejected at CAB; status has been reset to Draft.'.format(rfc.pk)
            log = ChangeLog(change_request=rfc, log=msg)
            log.save()
            # Send an email to the requester.
            subject = 'Change request {} has been rejected at CAB'.format(rfc.pk)
            detail_url = request.build_absolute_uri(rfc.get_absolute_url())
            text_content = """This is an automated message to let you know that change request
                {} ("{}") has been rejected at CAB, and its status reset to draft.\n
                Please review any log messages recorded on the change request as context prior
                to making any required alterations and re-submission:\n
                {}\n
                """.format(rfc.pk, rfc.title, detail_url)
            html_content = """<p>This is an automated message to let you know that change request
                {0} ("{1}") has been rejected at CAB, and its status reset to draft.</p>
                <p>Please review any log messages recorded on the change request as context prior
                to making any required alterations and re-submission:</p>
                <ul><li><a href="{2}">{2}</a></li></ul>
                """.format(rfc.pk, rfc.title, detail_url)
            msg = EmailMultiAlternatives(subject, text_content, settings.NOREPLY_EMAIL, [rfc.requester.email])
            msg.attach_alternative(html_content, 'text/html')
            msg.send()
            # Success notification.
            msg = 'RFC {} status set to "Draft"; requester has been emailed.'.format(rfc.pk)
            messages.success(request, msg)


cab_reject.short_description = 'Mark selected change requests as rejected at CAB (set to draft status)'


class ChangeRequestAdmin(ModelAdmin):
    actions = [cab_approve, cab_reject, email_endorser, email_requester]
    change_list_template = 'admin/registers/changerequest/change_list.html'
    date_hierarchy = 'planned_start'
    exclude = ('post_complete_email_date',)
    filter_horizontal = ('it_systems',)
    inlines = [ChangeLogInline]
    list_display = (
        'id', 'title', 'change_type', 'requester_name', 'endorser_name', 'implementer_name', 'sme_name', 'status',
        'created', 'planned_start', 'planned_end', 'completed')
    list_filter = ('change_type', 'status', CompletionListFilter)
    raw_id_fields = ('requester', 'endorser', 'implementer', 'sme')
    search_fields = (
        'id', 'title', 'requester__email', 'endorser__email', 'implementer__email', 'sme__email', 'implementation',
        'communication', 'reference_url', 'initiative_name', 'initiative_no', 'project_no',
    )

    def requester_name(self, obj):
        if obj.requester:
            return obj.requester.name
        return ''
    requester_name.short_description = 'requester'

    def endorser_name(self, obj):
        if obj.endorser:
            return obj.endorser.name
        return ''
    endorser_name.short_description = 'endorser'

    def implementer_name(self, obj):
        if obj.implementer:
            return obj.implementer.name
        return ''
    implementer_name.short_description = 'implementer'

    def sme_name(self, obj):
        if obj.sme:
            return obj.sme.name
        return ''
    sme_name.short_description = 'sme'

    def get_urls(self):
        urls = super(ChangeRequestAdmin, self).get_urls()
        urls = [path('export/', self.admin_site.admin_view(ChangeRequestExport.as_view()), name='changerequest_export')] + urls
        return urls

    def has_change_permission(self, request, obj=None):
        # The point of truth for RFCs is now Freshservice, therefore adding new objects here is disallowed.
        return False

    def has_add_permission(self, request):
        # The point of truth for RFCs is now Freshservice, therefore adding new objects here is disallowed.
        return False

    def has_delete_permission(self, request, obj=None):
        # The point of truth for RFCs is now Freshservice, therefore adding new objects here is disallowed.
        return False
