[
{
    "model": "rancher.envscanmodule",
    "pk": 1,
    "fields": {
        "resource_type": 21,
        "priority": 950,
        "multi": false,
        "sourcecode": "import re\r\n\r\nfrom rancher.models import EnvScanModule\r\nfrom rancher.utils import parse_host\r\n\r\nconnection_re = re.compile('^(?P<dbtype>(postgres)|(postgis))://(?P<user>[a-zA-Z0-9@\\-_\\.]+)(:(?P<password>[0-9a-zA-Z]+))?@(?P<host>[a-zA-Z0-9\\-\\_\\.@]+)(:(?P<port>[1-9][0-9]*))?/(?P<dbname>[0-9a-zA-Z\\-_]+)?$'  )\r\n\r\ndef scan(name,value,config):\r\n    if not value:\r\n        return None\r\n\r\n    m = connection_re.search(value)\r\n    if m:\r\n        domain,host,ip = parse_host(m.group(\"host\"))\r\n        return {\r\n            \"resource_type\":EnvScanModule.POSTGRES,\r\n            \"resource_id\":\"{}:{}/{}\".format(host,m.group(\"port\") or 5432,m.group(\"dbname\")),\r\n            \"properties\": {\r\n                \"user\":m.group(\"user\"),\r\n                \"password\":m.group(\"password\"),\r\n                \"dbtype\":m.group(\"dbtype\"),\r\n                \"host\":m.group(\"host\")\r\n            }\r\n        }\r\n    else:\r\n        return None",
        "active": true,
        "modified": "2021-08-04T02:33:52.229Z",
        "added": "2021-06-24T03:48:39.460Z"
    }
},
{
    "model": "rancher.envscanmodule",
    "pk": 3,
    "fields": {
        "resource_type": 22,
        "priority": 920,
        "multi": false,
        "sourcecode": "import re\r\n\r\nfrom rancher.models import EnvScanModule\r\n\r\nconnection_re = re.compile('^(?P<host>[a-zA-Z0-9_\\-\\.\\@]+)(:(?P<port>[0-9]+))?/(?P<dbname>[a-zA-Z0-9_\\-]+)$'  )\r\n\r\ndef scan(name,value,config):\r\n    if not value:\r\n        return None\r\n\r\n    lname = name.lower()\r\n    if all( k not in lname for k in (\"db\",\"database\",\"oracle\")):\r\n        return None\r\n\r\n    m = connection_re.search(value)\r\n    if m:\r\n        return {\r\n            \"resource_type\":EnvScanModule.ORACLE,\r\n            \"resource_id\":\"{}:{}/{}\".format(m.group(\"host\"),m.group(\"port\") or 1521,m.group(\"dbname\"))\r\n        }\r\n    else:\r\n        return None",
        "active": true,
        "modified": "2021-08-04T02:34:04.961Z",
        "added": "2021-06-24T04:01:55.151Z"
    }
},
{
    "model": "rancher.envscanmodule",
    "pk": 4,
    "fields": {
        "resource_type": 2,
        "priority": 250,
        "multi": true,
        "sourcecode": "import re\r\n\r\nfrom azure.storage.blob import  BlobServiceClient\r\n\r\nfrom rancher.models import EnvScanModule\r\n\r\nconnection_re = re.compile('^\\s*DefaultEndpointsProtocol=https;AccountName=(?P<accountname>[^;]+);AccountKey=(?P<accountkey>[^;]+)==;EndpointSuffix=core.windows.net\\s*$'  )\r\n\r\ndef scan(workload,envs,resource_configs):\r\n    if not envs:\r\n        return None\r\n\r\n    result = []\r\n\r\n    found_envs = set()\r\n    for name,value in envs:\r\n        if not value:\r\n            continue\r\n\r\n        if name in found_envs:\r\n            continue\r\n\r\n        value = value.strip()\r\n        m = connection_re.search(value)\r\n        if not m:\r\n            continue\r\n\r\n        accountname = m.group(\"accountname\")\r\n        items = [name]\r\n        resource_id = accountname\r\n        exception = None\r\n        try:\r\n            service_client = BlobServiceClient.from_connection_string(value)\r\n            storages = list(c[\"name\"] for c in  service_client.list_containers())\r\n                \r\n            #find the container used by this workload\r\n            resource_config = resource_configs.get(name) if resource_configs else None\r\n            if resource_config:\r\n                #resource is configured by user\r\n                values = [accountname]\r\n                if \"other_items\" in resource_config:\r\n                    for item in resource_config[\"other_items\"]:\r\n                        item_value = None\r\n                        for n,v in envs:\r\n                            if n != item:\r\n                                continue\r\n                            item_value = v\r\n                            break\r\n                        if item_value is None:\r\n                            item_value = \"null\"\r\n                            exception = \"The env({}) does not exist\".format(item)\r\n                        values.append(item_value)\r\n                        items.append(item)\r\n                \r\n                resource_id = (resource_config.get(\"resource_id\") or \"/\".join(\"{}\" for item in items)).format(*values)\r\n            else:\r\n                for n,v in envs:\r\n                    if not v:\r\n                        continue\r\n                    if n in found_envs:\r\n                        continue\r\n                        \r\n                    if v not in storages:\r\n                        continue\r\n                        \r\n                    items = [name,n]\r\n                    resource_id = \"{}/{}\".format(accountname,v)\r\n                    break\r\n                    \r\n        except Exception as ex:\r\n            exception = str(ex)\r\n            \r\n        storage = {\r\n            \"config_items\":items,\r\n            \"resource_type\":EnvScanModule.BLOBSTORAGE,\r\n            \"resource_id\":resource_id,\r\n            \"properties\":{\r\n                \"connection_string\":value\r\n            }\r\n        }\r\n        if exception:\r\n            storage[\"properties\"][\"exception\"] = exception\r\n            \r\n        result.append(storage)\r\n\r\n        for item in items:\r\n            found_envs.add(name)\r\n            \r\n    return result",
        "active": true,
        "modified": "2021-08-06T01:03:15.842Z",
        "added": "2021-06-24T04:09:07.290Z"
    }
},
{
    "model": "rancher.envscanmodule",
    "pk": 5,
    "fields": {
        "resource_type": 11,
        "priority": 850,
        "multi": false,
        "sourcecode": "import re\r\n\r\nfrom rancher.models import EnvScanModule\r\n\r\nconnection_re = re.compile('^(?P<host>[a-zA-Z0-9_\\-\\.\\@]+):(?P<port>[0-9]+)$'  )\r\n\r\ndef scan(name,value,config):\r\n    if not value:\r\n        return None\r\n\r\n    lname = name.lower()\r\n    if all( k not in lname for k in (\"memory\",\"cache\")):\r\n        return None\r\n\r\n    m = connection_re.search(value)\r\n    if m:\r\n        return {\r\n            \"resource_type\":EnvScanModule.MEMCACHED,\r\n            \"resource_id\":\"{}:{}\".format(m.group(\"host\"),m.group(\"port\"))\r\n        }\r\n    else:\r\n        return None",
        "active": true,
        "modified": "2021-08-04T02:34:29.143Z",
        "added": "2021-06-24T04:17:38.133Z"
    }
},
{
    "model": "rancher.envscanmodule",
    "pk": 6,
    "fields": {
        "resource_type": 12,
        "priority": 880,
        "multi": false,
        "sourcecode": "import re\r\n\r\nfrom rancher.models import EnvScanModule\r\n\r\nconnection_res = [\r\n    re.compile('^rediss?://((?P<user>[^:@]+)(:(?P<password>[^:@]+))?)?@(?P<host>[^:]+)(:(?P<port>[0-9]+))?/(?P<db>[0-9]+)$'  ),\r\n    re.compile('^unix://((?P<user>[^:@]+)(:(?P<password>[^:@]+))?)?@(?P<socketpath>[^\\?]+)\\?db=(?P<db>[0-9]+)$'  )\r\n]\r\n\r\ndef scan(name,value,config):\r\n    if not value:\r\n        return None\r\n\r\n    lname = name.lower()\r\n    if all( k not in lname for k in (\"memory\",\"cache\")):\r\n        return None\r\n\r\n    for connection_re in connection_res:\r\n        m = connection_re.search(value)\r\n        if m:\r\n            return {\r\n                \"resource_type\":EnvScanModule.REDIS,\r\n                \"resource_id\":\"{}:{}/{}\".format(m.group(\"host\"),m.group(\"port\") or 6379,m.group(\"db\")),\r\n                \"properties\":{\r\n                    \"user\":m.group(\"user\"),\r\n                    \"password\":m.group(\"password\")\r\n                }\r\n            }\r\n\r\n    return None",
        "active": true,
        "modified": "2021-08-04T02:34:15.219Z",
        "added": "2021-06-24T04:34:57.872Z"
    }
},
{
    "model": "rancher.envscanmodule",
    "pk": 7,
    "fields": {
        "resource_type": 4,
        "priority": 750,
        "multi": false,
        "sourcecode": "import re\r\n\r\nfrom rancher.models import EnvScanModule\r\n\r\nemail_server_re = re.compile('^.*email.*((host)|(server)).*',re.IGNORECASE  )\r\n\r\ndef scan(name,value,config):\r\n    if not value:\r\n        return None\r\n\r\n    m = email_server_re.search(value)\r\n    if m:\r\n        domain,host,ip = parse_host(m.group(\"host\"))\r\n        return {\r\n            \"resource_type\":EnvScanModule.EMAILSERVER,\r\n            \"resource_id\":value\r\n        }  \r\n    else:\r\n        return None",
        "active": true,
        "modified": "2021-08-04T02:34:46.060Z",
        "added": "2021-06-24T05:28:17.222Z"
    }
},
{
    "model": "rancher.envscanmodule",
    "pk": 9,
    "fields": {
        "resource_type": 1,
        "priority": 150,
        "multi": true,
        "sourcecode": "from rancher.models import EnvScanModule,WorkloadVolume,WorkloadResource\r\n\r\ndef scan(workload,envs,resource_configs):\r\n    if not envs:\r\n        return None\r\n\r\n    found_envs = set()\r\n    filesystems = []\r\n    #find all workload volumns\r\n    for volume in WorkloadVolume.objects.filter(workload=workload):\r\n        print(\"{}: volume = {}\".format(workload,volume))\r\n        found = False\r\n        if volume.volume_claim:\r\n            volume_path = volume.volume_claim.volume.volumepath\r\n        elif volume.volume:\r\n            volume_path = volume.volume.volumepath\r\n        elif volume.volumepath:\r\n            volume_path = volume.volumepath\r\n        else:\r\n            continue\r\n            \r\n        if volume.subpath:\r\n            mount_path = \"{}{}\".format(volume_path,volume.subpath)\r\n        else:\r\n            mount_path = volume_path\r\n        if mount_path[-1] == \"/\":\r\n            mount_path = mount_path[:-1]\r\n        \r\n        for name,value in envs:\r\n            if not value:\r\n                continue\r\n            if name in found_envs:\r\n                continue\r\n                \r\n            if not value.startswith(volume.mountpath):\r\n                continue\r\n                \r\n            value = value[len(volume.mountpath):]\r\n            if not value or value == \"/\":\r\n                resource_id = mount_path\r\n            elif value[0] ==\"/\":\r\n                resource_id = \"{}{}\".format(mount_path,value)\r\n            else:\r\n                resource_id = \"{}/{}\".format(mount_path,value)\r\n\r\n            resource_config = resource_configs.get(name) if resource_configs else None\r\n            if resource_config:\r\n                values = [resource_id]\r\n                if \"other_items\" in resource_config:\r\n                    for item in resource_config[\"other_items\"]:\r\n                        for n,v in envs:\r\n                            if n != item:\r\n                                continue\r\n                            if v[0] == \"/\":\r\n                                values.append(v[1:])\r\n                            else:\r\n                                values.append(v)\r\n                    items = [name] + resource_config[\"other_items\"]\r\n                else:\r\n                    items = [name]\r\n                    \r\n                resource_id = (resource_config.get(\"resource_id\") or \"/\".join(\"{}\" for item in items)).format(*values)\r\n            else:\r\n                items = [name]\r\n                \r\n            filesystems.append({\r\n                \"config_items\":items,\r\n                \"resource_type\":EnvScanModule.FILESYSTEM,\r\n                \"config_source\": WorkloadResource.ENV | WorkloadResource.WORKLOADVOLUME,\r\n                \"resource_id\": resource_id,\r\n                \"properties\": {\r\n                    \"mountpath\":volume.mountpath,\r\n                    \"workloadvolumepk\":volume.id,\r\n                    \"root_path\":volume_path,\r\n                    \"name\":volume.name\r\n                }\r\n                    \r\n            })\r\n            found = True\r\n            for item in items:\r\n                found_envs.add(item)\r\n        \r\n        if not found:\r\n            filesystems.append({\r\n                \"config_items\":[],\r\n                \"resource_type\":EnvScanModule.FILESYSTEM,\r\n                \"config_source\": WorkloadResource.WORKLOADVOLUME,\r\n                \"resource_id\": mount_path,\r\n                \"properties\": {\r\n                    \"mountpath\":volume.mountpath,\r\n                    \"workloadvolumepk\":volume.id,\r\n                    \"root_path\":volume_path,\r\n                    \"name\":volume.name\r\n                }\r\n            })\r\n    \r\n    return filesystems",
        "active": true,
        "modified": "2021-08-04T06:18:51.006Z",
        "added": "2021-06-24T07:14:49.858Z"
    }
},
{
    "model": "rancher.envscanmodule",
    "pk": 10,
    "fields": {
        "resource_type": 999,
        "priority": 10,
        "multi": true,
        "sourcecode": "import re\r\n\r\nfrom rancher.models import EnvScanModule,WorkloadResource\r\n\r\nurl_re = re.compile('^(?P<protocol>https?)://(?P<host>[^:/$]+)(:(?P<port>[0-9]+))?(?P<path>/[^\\?]*)?(\\?(?P<params>.+)?)?$' )\r\ndef scan(workload,envs,resource_configs):\r\n    image_name_lower = workload.image.lower()\r\n    #check whether it is a database server or a memory cache\r\n    for key,servicetype,default_port,id_pattern,excluded_keys in (\r\n        (\"postgis\",EnvScanModule.POSTGRES,5432,\"{}:{}/\",(\"admin\",\"client\")),\r\n        (\"postgres\",EnvScanModule.POSTGRES,5432,\"{}:{}/\",(\"admin\",\"client\")),\r\n        (\"mysql\",EnvScanModule.MYSQL,3306,\"{}:{}/\",(\"admin\",\"client\")),\r\n        (\"oracle\",EnvScanModule.ORACLE,1521,\"{}:{}/\",(\"admin\",\"client\")),\r\n        \r\n        (\"redis\",EnvScanModule.REDIS,6379,\"{}:{}/\",(\"admin\",\"client\")),\r\n        (\"memcached\",EnvScanModule.MEMCACHED,11211,\"{}:{}\",(\"admin\",\"client\"))\r\n    ):\r\n        if key not in image_name_lower:\r\n            continue\r\n        if any(key in image_name_lower for key in (excluded_keys or [])):\r\n            continue\r\n\r\n        listening =  workload.listenings.first()\r\n        if listening:\r\n            listen_port = listening.listen_port\r\n            internal_port = listening.container_port\r\n            result = [{\r\n                \"config_items\":[],\r\n                \"config_source\": WorkloadResource.SERVICE,\r\n                \"resource_type\":servicetype,\r\n                \"resource_id\":id_pattern.format(workload.name,internal_port),\r\n            },{\r\n                \"config_items\":[],\r\n                \"config_source\": WorkloadResource.SERVICE,\r\n                \"resource_type\":servicetype,\r\n                \"resource_id\":id_pattern.format(\"{1}.{0}\".format(workload.namespace.name,workload.name),internal_port),\r\n            },{\r\n                \"config_items\":[],\r\n                \"config_source\": WorkloadResource.SERVICE,\r\n                \"resource_type\":servicetype,\r\n                \"resource_id\":id_pattern.format(\"{0}.lan.fyi\".format(workload.cluster.name),listen_port),\r\n            }]\r\n        else:\r\n            listen_port = default_port\r\n            internal_port = default_port\r\n            result = [{\r\n                \"config_items\":[],\r\n                \"config_source\": WorkloadResource.SERVICE,\r\n                \"resource_type\":servicetype,\r\n                \"resource_id\":id_pattern.format(workload.name,listen_port),\r\n            },{\r\n                \"config_items\":[],\r\n                \"config_source\": WorkloadResource.SERVICE,\r\n                \"resource_type\":servicetype,\r\n                \"resource_id\":id_pattern.format(\"{1}.{0}\".format(workload.namespace.name,workload.name),listen_port),\r\n            }]\r\n       \r\n        return result\r\n        \r\n    #check whether it is a web application\r\n    if workload.kind == workload.DEPLOYMENT:\r\n        result = []\r\n        for listening in workload.listenings.all():\r\n            url = listening.listen\r\n            if not url:\r\n                continue\r\n            m = url_re.search(url)\r\n            if m:\r\n                result.append({\r\n                    \"resource_type\":EnvScanModule.RESTAPI,\r\n                    \"config_items\":[],\r\n                    \"resource_id\":\"{}{}\".format(m.group(\"host\"), \":{}\".format(m.group(\"port\")) if m.group(\"port\") else \"\"),\r\n                    \"config_source\": WorkloadResource.SERVICE,\r\n                    \"properties\": {\r\n                        \"protocol\":m.group(\"protocol\"),\r\n                        \"path\":m.group(\"path\"),\r\n                        \"params\":m.group(\"params\")\r\n                    }\r\n                })\r\n    \r\n        if result:\r\n            return result\r\n    \r\n    \r\n    return None",
        "active": true,
        "modified": "2021-08-04T02:35:40.813Z",
        "added": "2021-07-15T07:36:02.691Z"
    }
},
{
    "model": "rancher.envscanmodule",
    "pk": 12,
    "fields": {
        "resource_type": 3,
        "priority": 300,
        "multi": true,
        "sourcecode": "import re\r\n\r\nfrom rancher.models import EnvScanModule\r\n\r\nurl_re = re.compile('^(?P<protocol>https?)://(?P<host>[^:/$]+)(:(?P<port>[0-9]+))?(?P<path>/[^\\?]*)?(\\?(?P<params>.+)?)?$' )\r\nuser_re = re.compile(\"[_\\-]?(user[_\\-]?name|user[_\\-]?account|user|account)[_\\-]?\",re.IGNORECASE)\r\npassword_re = re.compile(\"[_\\-]?(password|passwd|pass)[_\\-]?\",re.IGNORECASE)\r\napikey_re = re.compile(\"[_\\-]?(api(_|\\-)?)?key[_\\-]?\",re.IGNORECASE)\r\napitoken_re = re.compile(\"[_\\-]?(api(_|\\-)?)?token[_\\-]?\",re.IGNORECASE)\r\napisecret_re = re.compile(\"[_\\-]?(api(_|\\-)?)?secret((_|\\-)?key)?[_\\-]?\",re.IGNORECASE)\r\ndef scan(workload,envs,resource_configs):\r\n    if not envs:\r\n        return None\r\n\r\n    found_envs = set()\r\n    result = []\r\n    extra_datas = []\r\n    for name,value in envs:\r\n        if not value:\r\n            continue\r\n            \r\n        if name in found_envs:\r\n            continue\r\n\r\n        value = value.strip()\r\n        m = url_re.search(value)\r\n        if not m:\r\n            continue\r\n        \r\n        resource_id = \"{}{}\".format(m.group(\"host\"), \":{}\".format(m.group(\"port\")) if m.group(\"port\") else \"\")\r\n        api = {\r\n            \"config_items\":[name],\r\n            \"resource_type\":EnvScanModule.RESTAPI,\r\n            \"resource_id\":resource_id,\r\n            \"properties\": {\r\n                \"protocol\":m.group(\"protocol\"),\r\n                \"path\":m.group(\"path\"),\r\n                \"params\":m.group(\"params\")\r\n            }\r\n        }\r\n        result.append(api)\r\n        found_envs.add(name)\r\n        \r\n        prefix = None\r\n        suffix = None\r\n        extra_datas.clear()\r\n        \r\n        for n,v in envs:\r\n            if not v:\r\n                continue\r\n                \r\n            if n in found_envs:\r\n                continue\r\n                \r\n            for property,pattern,priority in ((\"user\",user_re,1),(\"password\",password_re,2),(\"apikey\",apikey_re,3),(\"apitoken\",apitoken_re,4),(\"apisecret\",apisecret_re,5)):\r\n                m = pattern.search(n)\r\n                if m:\r\n                    p,s = n.split(m.group(),1)\r\n                    if not p and not s:\r\n                        break\r\n                    elif prefix or suffix:\r\n                        #alrady found the prefix and suffix\r\n                        if prefix != p or suffix != s:\r\n                            #prefix or suffix don't match\r\n                            break\r\n                    elif (not p or name.startswith(p)) and (not s or name.endswith(s)):\r\n                        #found prefix and suffix\r\n                        prefix = p\r\n                        suffix = s\r\n                    else:\r\n                        break\r\n                    extra_datas.append((priority,property,n,v))\r\n                    break\r\n        extra_datas.sort(key=lambda o:o[0])\r\n        \r\n        for p,property,envitem,value in extra_datas:\r\n            api[\"properties\"][property] = value\r\n            api[\"config_items\"].append(envitem)\r\n            found_envs.add(envitem)\r\n            \r\n    return result",
        "active": true,
        "modified": "2021-08-06T05:57:50.672Z",
        "added": "2021-08-05T05:38:04.564Z"
    }
},
{
    "model": "rancher.envscanmodule",
    "pk": 13,
    "fields": {
        "resource_type": 20,
        "priority": 280,
        "multi": true,
        "sourcecode": "import re\r\n\r\nfrom rancher.models import EnvScanModule\r\n\r\nserver_re = re.compile(\"[_\\-]?(host|server)[_\\-]?\",re.IGNORECASE)\r\nuser_re = re.compile(\"[_\\-]?(user[_\\-]?name|user[_\\-]?account|user|account)[_\\-]?\",re.IGNORECASE)\r\npassword_re = re.compile(\"[_\\-]?(password|passwd|pass)[_\\-]?\",re.IGNORECASE)\r\ndbname_re = re.compile(\"[_\\-]?(name|dbname)[_\\-]?\",re.IGNORECASE)\r\nschema_re = re.compile(\"[_\\-]?schema[_\\-]?\",re.IGNORECASE)\r\nport_re = re.compile(\"[_\\-]?port[_\\-]?\",re.IGNORECASE)\r\n\r\ndef scan(workload,envs,resource_configs):\r\n    if not envs:\r\n        return None\r\n\r\n    found_envs = set()\r\n    result = []\r\n    port = None\r\n    extra_datas = []\r\n    dbname = \"\"\r\n    for name,value in envs:\r\n        if not value:\r\n            continue\r\n            \r\n        if name in found_envs:\r\n            continue\r\n        value = value.strip()\r\n        m = server_re.search(name)\r\n        if not m:\r\n            continue\r\n        if any(name in value for name in (\"pgsql\",\"postgres\",\"postgis\",\"pg\")):\r\n            kind = EnvScanModule.POSTGRES\r\n            port = 5432\r\n        elif any(name in value for name in (\"mysql\",\"my\")):\r\n            kind = EnvScanModule.MYSQL\r\n            port = 3306\r\n        elif any(name in value for name in (\"oracle\",\"ora\")):\r\n            kind = EnvScanModule.ORACLE\r\n            port = 1521\r\n        else:\r\n            kind = EnvScanModule.POSTGRES\r\n            port = 5432\r\n        found_envs.add(name)\r\n            \r\n        prefix,suffix = name.split(m.group(),1)\r\n        extra_datas.clear()\r\n        for n,v in envs:\r\n            is_user = True\r\n            if not v:\r\n                continue\r\n                \r\n            if n in found_envs:\r\n                continue\r\n\r\n            for prop,pattern,priority in ((\"port\",port_re,1),(\"schema\",schema_re,3),(\"user\",user_re,4),(\"password\",password_re,5),(\"dbname\",dbname_re,2)):\r\n                m = pattern.search(n)\r\n                if m:\r\n                    p,s = n.split(m.group(),1)\r\n                    if not prefix and not suffix:\r\n                        if p or s:\r\n                            break\r\n                    elif prefix and suffix:\r\n                        if not p or not s:\r\n                            break\r\n                        elif (not prefix.startswith(p) and not p.startswith(prefix)) or (not suffix.startswith(s) and not s.startswith(suffix)):\r\n                            break\r\n                    elif prefix:\r\n                        if not p or s:\r\n                            break\r\n                        elif not prefix.startswith(p) and not p.startswith(prefix):\r\n                            break\r\n                    else:\r\n                        if p or not s:\r\n                            break\r\n                        elif not suffix.startswith(s) and not s.startswith(suffix):\r\n                            break\r\n                            \r\n                    if prop == \"port\":\r\n                        port = v or port\r\n                    elif prop == \"dbname\":\r\n                        dbname = v\r\n                    extra_datas.append((priority,prop,n,v))\r\n                    break\r\n                    \r\n        extra_datas.sort(key=lambda o:o[0])\r\n        \r\n        if dbname:\r\n            db = {\r\n                \"config_items\":[name],\r\n                \"resource_type\":kind,\r\n                \"resource_id\":\"{}:{}/{}\".format(value,port,dbname),\r\n                \"properties\": {\r\n                }\r\n            }\r\n\r\n            for p,prop,env_item,env_value in extra_datas:\r\n                if prop not in (\"port\",\"dbname\"):\r\n                    db[\"properties\"][prop] = env_value\r\n                db[\"config_items\"].append(env_item)\r\n                found_envs.add(env_item)\r\n            \r\n            result.append(db)\r\n            \r\n\r\n    return result",
        "active": true,
        "modified": "2021-08-06T07:43:19.296Z",
        "added": "2021-08-06T06:16:06.768Z"
    }
}
]
