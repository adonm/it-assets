# Generated by Django 2.2.24 on 2021-07-27 01:50
import yaml
import json

from django.db import migrations,connection
from django.db import models as django_models

from rancher import models


check_column_sql = "select count(*) from pg_attribute a join pg_class b on a.attrelid=b.oid where b.relname='{0}' and b.relkind='r' and a.atttypid > 0 and a.attname='{1}'"

def create_imagefamily_from_image(apps,schema_editor):
    print("Create imagefamily from images")
    with connection.cursor() as cursor:
        cursor.execute(check_column_sql.format(models.ContainerImage._meta.db_table,"account"))
        if cursor.fetchone()[0] == 0:
            print("Column 'account' doesn't exist, already processed.")
            return

        cursor.execute("select id,account,name from {} where imagefamily_id is null".format(models.ContainerImage._meta.db_table))
        for row in cursor.fetchall():
            print("Create imagefamily from image({})".format(row[0]))
            imagefamily,created = models.ContainerImageFamily.objects.get_or_create(account=row[1],name=row[2])
            cursor.execute("update {0} set imagefamily_id={2} where id={1}".format(models.ContainerImage._meta.db_table,row[0],imagefamily.id))

def create_image_from_workload(apps,schema_editor):
    print("Create image from workload")
    with connection.cursor() as cursor:
        cursor.execute(check_column_sql.format(models.Workload._meta.db_table,"image"))
        if cursor.fetchone()[0] == 0:
            print("Column 'image' doesn't exist, already processed.")
            return

        cursor.execute("select id,image from {} where containerimage_id is null".format(models.Workload._meta.db_table))
        for row in cursor.fetchall():
            print("Create image from workload({})".format(row[0]))
            containerimage= models.ContainerImage.parse_imageid(row[1],scan=False)
            cursor.execute("update {0} set containerimage_id={2} where id={1}".format(models.Workload._meta.db_table,row[0],containerimage.id))

def tansform_other_config_to_json(apps,schema_editor):
    print("Transform other_config to json")
    with connection.cursor() as cursor:
        cursor.execute(check_column_sql.format(models.WorkloadVolume._meta.db_table,"other_config_old"))
        if cursor.fetchone()[0] == 0:
            print("Column 'other_config_old' doesn't exist, already processed.")
            return

        cursor.execute("select id,other_config_old from {}".format(models.WorkloadVolume._meta.db_table))
        for row in cursor.fetchall():
            if row[1]:
                other_config = json.dumps(yaml.load(row[1]))
            else:
                other_config = 'null'
            cursor.execute("update {0} set other_config='{2}' where id={1}".format(models.WorkloadVolume._meta.db_table,row[0],other_config))


class Migration(migrations.Migration):

    dependencies = [
        ('rancher', '0037_auto_20210727_0950'),
    ]

    operations = [
        migrations.AlterField(
            model_name='ContainerImage',
            name='account',
            field=django_models.CharField(max_length=128,editable=False, null=True),
        ),
        migrations.AlterField(
            model_name='ContainerImage',
            name='name',
            field=django_models.CharField(max_length=64,editable=False, null=True),
        ),
        #create imagefamily from image
        migrations.RunPython(create_imagefamily_from_image),
        #create image from workload
        migrations.RunPython(create_image_from_workload),
        #transform other_config to json format
        migrations.RunPython(tansform_other_config_to_json)
    ]
