# Generated by Django 2.2.21 on 2021-05-10 02:11

import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    replaces = [('assets', '0001_initial'), ('assets', '0002_auto_20180510_1551'), ('assets', '0003_auto_20180514_1056'), ('assets', '0004_auto_20180810_1320'), ('assets', '0005_auto_20200706_1209'), ('assets', '0006_auto_20200904_1537')]

    initial = True

    dependencies = [
        ('tracking', '0001_initial'),
        ('organisation', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='HardwareAsset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('extra_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('date_purchased', models.DateField(blank=True, null=True)),
                ('purchased_value', models.DecimalField(blank=True, decimal_places=2, help_text='The amount paid for this asset, inclusive of any upgrades (excluding GST).', max_digits=20, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('service_request_url', models.URLField(blank=True, help_text='URL (e.g. Freshdesk, Jira, etc.) of the service request for purchase of this asset.', max_length=2000, null=True, verbose_name='Service request URL')),
                ('asset_tag', models.CharField(help_text='OIM asset tag number.', max_length=10, unique=True)),
                ('finance_asset_tag', models.CharField(blank=True, help_text='The Finance Services Branch asset number for (leave blank if unknown).', max_length=10, null=True)),
                ('status', models.CharField(choices=[('In storage', 'In storage'), ('Deployed', 'Deployed'), ('Disposed', 'Disposed')], default='In storage', max_length=50)),
                ('serial', models.CharField(help_text='The serial number or service tag.', max_length=50)),
                ('local_property', models.BooleanField(default=False, help_text='Indicates an item that is not registered with Finance (i.e. is\n            valued <$5,000 and is not defined as portable and attractive).')),
                ('is_asset', models.BooleanField(default=False, help_text='Indicates an item that is valued >$5,000')),
                ('warranty_end', models.DateField(blank=True, help_text='Expiry date of hardware warranty period (if applicable).', null=True)),
                ('assigned_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='organisation.DepartmentUser')),
                ('cost_centre', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='organisation.CostCentre')),
            ],
            options={
                'ordering': ('-asset_tag',),
            },
        ),
        migrations.CreateModel(
            name='HardwareInvoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('upload', models.FileField(help_text='A digital copy of the asset invoice (e.g. PDF, JPG or PNG)', max_length=512, upload_to='uploads/%Y/%m/%d')),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assets.HardwareAsset')),
            ],
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='E.g. Dell, Cisco, etc.', max_length=256, unique=True)),
                ('details', models.TextField(blank=True, null=True)),
                ('account_rep', models.CharField(blank=True, max_length=200, null=True)),
                ('contact_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('contact_phone', models.CharField(blank=True, max_length=50, null=True)),
                ('website', models.URLField(blank=True, null=True)),
                ('extra_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='HardwareModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_type', models.CharField(choices=[('Air conditioner', 'Air conditioner'), ('Camera - Compact', 'Camera - Compact'), ('Camera - Conference', 'Camera - Conference'), ('Camera - Security (IP)', 'Camera - Security (IP)'), ('Camera - Other', 'Camera - Other'), ('Cellular repeater', 'Cellular repeater'), ('Computer - Desktop', 'Computer - Desktop'), ('Computer - Laptop', 'Computer - Laptop'), ('Computer - Monitor', 'Computer - Monitor'), ('Computer - Peripheral', 'Computer - Peripheral'), ('Computer - Tablet PC', 'Computer - Tablet PC'), ('Computer - Other', 'Computer - Other'), ('Environmental monitor', 'Environmental monitor'), ('Network - Media converter', 'Network - Media converter'), ('Network - Modem', 'Network - Modem'), ('Network - Module or card', 'Network - Module or card'), ('Network - Music On Hold', 'Network - Music On Hold'), ('Network - Power injector', 'Network - Power injector'), ('Network - Router', 'Network - Router'), ('Network - Switch (Ethernet)', 'Network - Switch (Ethernet)'), ('Network - Switch (FC)', 'Network - Switch (FC)'), ('Network - Wireless AP', 'Network - Wireless AP'), ('Network - Wireless bridge', 'Network - Wireless bridge'), ('Network - Wireless controller', 'Network - Wireless controller'), ('Network - Other', 'Network - Other'), ('Office Equipment - Other', 'Office Equipment - Other'), ('Phone - Conference', 'Phone - Conference'), ('Phone - Desk', 'Phone - Desk'), ('Phone - Gateway', 'Phone - Gateway'), ('Phone - Mobile', 'Phone - Mobile'), ('Phone - Wireless or portable', 'Phone - Wireless or portable'), ('Phone - Other', 'Phone - Other'), ('Power Distribution Unit', 'Power Distribution Unit'), ('Printer - Multifunction copier', 'Printer - Multifunction copier'), ('Printer - Plotter', 'Printer - Plotter'), ('Printer - Server', 'Printer - Server'), ('Printer - Workgroup', 'Printer - Workgroup'), ('Projector', 'Projector'), ('Rack', 'Rack'), ('Server - Blade', 'Server - Blade'), ('Server - Rackmount', 'Server - Rackmount'), ('Server - Tower', 'Server - Tower'), ('Storage - Disk array', 'Storage - Disk array'), ('Storage - Hard Drive', 'Storage - Hard Drive'), ('Storage - NAS', 'Storage - NAS'), ('Storage - SAN', 'Storage - SAN'), ('Storage - Other', 'Storage - Other'), ('Speaker', 'Speaker'), ('Tape autoloader', 'Tape autoloader'), ('Tape drive', 'Tape drive'), ('Telecom - Testing Device', 'Telecom - Testing Device'), ('UPS', 'UPS'), ('Other', 'Other')], help_text='The broad category of this hardware model.', max_length=50)),
                ('model_no', models.CharField(help_text="The short model number (eg. '7945G' for a Cisco 7956G phone).\n            Do not enter the class (eg. '7900 series') or the product code (eg. 'WS-7945G=')", max_length=50, verbose_name='model number')),
                ('notes', models.TextField(blank=True, null=True)),
                ('vendor', models.ForeignKey(help_text='The manufacturer of this hardware model (e.g. Dell, Cisco, Apple).', on_delete=django.db.models.deletion.PROTECT, to='assets.Vendor', verbose_name='manufacturer')),
            ],
            options={
                'ordering': ('model_no',),
                'unique_together': {('vendor', 'model_no')},
            },
        ),
        migrations.AddField(
            model_name='hardwareasset',
            name='hardware_model',
            field=models.ForeignKey(help_text="The manufacturer's hardware model.", on_delete=django.db.models.deletion.PROTECT, to='assets.HardwareModel'),
        ),
        migrations.AddField(
            model_name='hardwareasset',
            name='location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='organisation.Location'),
        ),
        migrations.AddField(
            model_name='hardwareasset',
            name='org_unit',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='organisation.OrgUnit'),
        ),
        migrations.AddField(
            model_name='hardwareasset',
            name='vendor',
            field=models.ForeignKey(help_text='Vendor/reseller from whom this asset was purchased.', on_delete=django.db.models.deletion.PROTECT, to='assets.Vendor'),
        ),
        migrations.AlterField(
            model_name='hardwareasset',
            name='status',
            field=models.CharField(choices=[('In storage', 'In storage'), ('Deployed', 'Deployed'), ('Disposed', 'Disposed'), ('Transferred', 'Transferred')], default='In storage', max_length=50),
        ),
        migrations.CreateModel(
            name='SoftwareAsset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('extra_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('date_purchased', models.DateField(blank=True, null=True)),
                ('purchased_value', models.DecimalField(blank=True, decimal_places=2, help_text='The amount paid for this asset, inclusive of any upgrades (excluding GST).', max_digits=20, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('service_request_url', models.URLField(blank=True, help_text='URL (e.g. Freshdesk, Jira, etc.) of the service request for purchase of this asset.', max_length=2000, null=True, verbose_name='Service request URL')),
                ('name', models.CharField(max_length=512, unique=True)),
                ('url', models.URLField(blank=True, max_length=2000, null=True, verbose_name='URL')),
                ('support', models.TextField(blank=True, help_text='Description of the scope of vendor support.', null=True)),
                ('support_expiry', models.DateField(blank=True, help_text='Expiry date of vendor support (if applicable).', null=True)),
                ('license', models.PositiveSmallIntegerField(blank=True, choices=[(0, 'License/perpetual'), (1, 'Subscription/SaaS')], help_text='The license type/arrangement for this software asset', null=True)),
                ('license_details', models.TextField(blank=True, help_text='Description of license arrangement (custodian of license key/s, etc.)', null=True)),
                ('license_count', models.PositiveSmallIntegerField(blank=True, default=1, help_text='The number of licenses, seats or subscriptions provided with this software asset.', null=True)),
                ('cost_centre', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='organisation.CostCentre')),
                ('org_unit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='organisation.OrgUnit')),
                ('publisher', models.ForeignKey(blank=True, help_text='The publisher of this software (may differ from the vendor/reseller).', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='publisher', to='assets.Vendor')),
                ('vendor', models.ForeignKey(help_text='Vendor/reseller from whom this asset was purchased.', on_delete=django.db.models.deletion.PROTECT, to='assets.Vendor')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterField(
            model_name='hardwareasset',
            name='assigned_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='organisation.DepartmentUser'),
        ),
    ]
