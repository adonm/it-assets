[
{
    "model": "nginx.requestpathnormalizer",
    "pk": 1,
    "fields": {
        "filter_code": "lambda webserver,request_path:any(name in webserver for name in (\"pbs\",\"bfrs\",\"itassets\",\"prs\"))",
        "normalize_code": "import re\r\nignore_re = re.compile(\"^/static(/[a-zA-Z0-9_\\-]+)*/(img|fonts)/\",re.IGNORECASE)\r\n\r\nid_re = re.compile(\"^\\d+$\")\r\n\r\ndef normalize(request_path):\r\n    if ignore_re.search(request_path):\r\n        return None\r\n\r\n    return request_path\r\n\r\n    path_segments = request_path.split(\"/\")\r\n    index = 0\r\n    changed = False\r\n    while index < len(path_segments):\r\n        if id_re.search(path_segments[index]):\r\n            path_segments[index]='[ID]'\r\n            changed = True\r\n        index += 1\r\n    if changed:\r\n        return \"/\".join(path_segments)\r\n    else:\r\n        return request_path",
        "order": 100,
        "changed": "2020-08-18T03:41:50.126Z",
        "applied": "2020-08-18T04:28:13.550Z"
    }
},
{
    "model": "nginx.requestpathnormalizer",
    "pk": 3,
    "fields": {
        "filter_code": "lambda webserver,request_path:True",
        "normalize_code": "import re\r\nignore_re = re.compile(\"((\\.(js|css|css.map))|favicon.ico)$\",re.IGNORECASE)\r\n\r\ndef normalize(request_path):\r\n    if ignore_re.search(request_path):\r\n        return None\r\n    else:\r\n        return request_path",
        "order": 0,
        "changed": "2020-08-18T01:54:55.910Z",
        "applied": "2020-08-18T04:28:13.550Z"
    }
},
{
    "model": "nginx.requestpathnormalizer",
    "pk": 4,
    "fields": {
        "filter_code": "lambda webserver,request_path:webserver.startswith(\"library.\")",
        "normalize_code": "import re\r\nid_re = re.compile(\"^\\d+$\")\r\npdf_re = re.compile(\"\\.(pdf|tif)$\",re.IGNORECASE)\r\n\r\ndef normalize(request_path):\r\n    return request_path\r\n\r\n    path_segments = request_path.split(\"/\")\r\n    index = 0\r\n    changed = False\r\n    while index < len(path_segments):\r\n        if id_re.search(path_segments[index]):\r\n            path_segments[index]='[ID]'\r\n            changed = True\r\n        index += 1\r\n        \r\n    if pdf_re.search(path_segments[-1]):\r\n        path_segments[-1]='*.pdf'\r\n        return \"/\".join(path_segments)\r\n    elif changed:\r\n        return \"/\".join(path_segments)\r\n    else:\r\n        return request_path",
        "order": 100,
        "changed": "2020-08-18T03:41:24.429Z",
        "applied": "2020-08-18T04:28:13.550Z"
    }
},
{
    "model": "nginx.requestpathnormalizer",
    "pk": 6,
    "fields": {
        "filter_code": "lambda webserver,request_path:\"ssslite\" in webserver",
        "normalize_code": "import re\r\nignore_re = re.compile(\"^/dist/static/\")\r\n\r\ndef normalize(request_path):\r\n    if ignore_re.search(request_path):\r\n        return None\r\n    else:\r\n        return request_path",
        "order": 100,
        "changed": "2020-08-18T00:34:15.856Z",
        "applied": "2020-08-18T04:28:13.550Z"
    }
},
{
    "model": "nginx.requestpathnormalizer",
    "pk": 7,
    "fields": {
        "filter_code": "lambda webserver,request_path:\"sss\" in webserver and \"ssslite\" not in webserver",
        "normalize_code": "import re\r\nignore_re = re.compile(\"^/dist/static/\")\r\n\r\ndef normalize(request_path):\r\n    if ignore_re.search(request_path):\r\n        return None\r\n    else:\r\n        return request_path",
        "order": 100,
        "changed": "2020-08-18T01:48:30.398Z",
        "applied": "2020-08-18T04:28:13.550Z"
    }
}
]
