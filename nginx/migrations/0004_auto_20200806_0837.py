# Generated by Django 2.2.14 on 2020-08-06 00:37

import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import nginx.models


class Migration(migrations.Migration):

    dependencies = [
        ('nginx', '0003_auto_20200721_1129'),
    ]

    operations = [
        migrations.CreateModel(
            name='RequestParameterFilter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filter_code', models.CharField(help_text="A lambda function with two parameters 'webserver' and 'request_path'", max_length=512, unique=True)),
                ('included_parameters', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=64), blank=True, help_text='The list of parameters', null=True, size=None)),
                ('excluded_parameters', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=64), blank=True, help_text='The list of parameters excluded from the request parameters', null=True, size=None)),
                ('case_insensitive', models.BooleanField(default=True)),
                ('order', models.PositiveSmallIntegerField(default=0, help_text='The order to find the filter rule, high order means hight priority')),
                ('changed', models.DateTimeField(auto_now=True, help_text='The last time when the filter was changed')),
                ('applied', models.DateTimeField(editable=False, help_text='The last time when the filter was applied to the existed data', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='RequestPathNormalizer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filter_code', models.CharField(help_text="A lambda function with two parameters 'webserver' and 'request_path'", max_length=512, unique=True)),
                ('normalize_code', models.TextField(help_text="The source code of the module which contains a method 'def normalize(request_path)' to return a normalized request  path", unique=True)),
                ('order', models.PositiveSmallIntegerField(default=0, help_text='The order to find the filter rule, high order means hight priority')),
                ('changed', models.DateTimeField(auto_now=True, help_text='The last time when the filter was changed')),
                ('applied', models.DateTimeField(editable=False, help_text='The last time when the filter was applied to the existed data', null=True)),
            ],
        ),
        migrations.AddField(
            model_name='webapplocation',
            name='score',
            field=models.PositiveIntegerField(default=0, editable=False),
        ),
        migrations.CreateModel(
            name='WebAppAccessLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('log_starttime', models.DateTimeField(editable=False)),
                ('log_endtime', models.DateTimeField(editable=False)),
                ('webserver', models.CharField(editable=False, max_length=256)),
                ('request_path', models.CharField(editable=False, max_length=512)),
                ('path_parameters', models.TextField(editable=False, null=True)),
                ('all_path_parameters', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=64), editable=False, null=True, size=None)),
                ('http_status', models.PositiveIntegerField(editable=False)),
                ('requests', models.PositiveIntegerField(editable=False)),
                ('max_response_time', models.FloatField(editable=False)),
                ('min_response_time', models.FloatField(editable=False)),
                ('avg_response_time', models.FloatField(editable=False)),
                ('total_response_time', models.FloatField(editable=False)),
                ('webapp', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='logs', to='nginx.WebApp')),
                ('webapplocation', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='logs', to='nginx.WebAppLocation')),
            ],
            options={
                'unique_together': {('log_starttime', 'webserver', 'request_path', 'http_status', 'path_parameters')},
                'index_together': {('webapp', 'webapplocation'), ('log_starttime', 'webapp', 'webapplocation')},
            },
            bases=(nginx.models.PathParametersMixin, models.Model),
        ),
        migrations.CreateModel(
            name='WebAppAccessDailyReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('log_day', models.DateField(editable=False)),
                ('webserver', models.CharField(editable=False, max_length=256)),
                ('requests', models.PositiveIntegerField(default=0, editable=False)),
                ('success_requests', models.PositiveIntegerField(default=0, editable=False)),
                ('error_requests', models.PositiveIntegerField(default=0, editable=False)),
                ('unauthorized_requests', models.PositiveIntegerField(default=0, editable=False)),
                ('timeout_requests', models.PositiveIntegerField(default=0, editable=False)),
                ('webapp', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dailyreports', to='nginx.WebApp')),
            ],
            options={
                'unique_together': {('log_day', 'webserver')},
                'index_together': {('log_day', 'webapp'), ('webapp',)},
            },
        ),
        migrations.CreateModel(
            name='WebAppAccessDailyLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('log_day', models.DateField(editable=False)),
                ('webserver', models.CharField(editable=False, max_length=256)),
                ('request_path', models.CharField(editable=False, max_length=512)),
                ('path_parameters', models.TextField(editable=False, null=True)),
                ('all_path_parameters', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=64), editable=False, null=True, size=None)),
                ('http_status', models.PositiveIntegerField(editable=False)),
                ('requests', models.PositiveIntegerField(editable=False)),
                ('max_response_time', models.FloatField(editable=False)),
                ('min_response_time', models.FloatField(editable=False)),
                ('avg_response_time', models.FloatField(editable=False)),
                ('total_response_time', models.FloatField(editable=False)),
                ('webapp', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dailylogs', to='nginx.WebApp')),
                ('webapplocation', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dailylogs', to='nginx.WebAppLocation')),
            ],
            options={
                'unique_together': {('log_day', 'webserver', 'request_path', 'http_status', 'path_parameters')},
                'index_together': {('webapp', 'webapplocation'), ('log_day', 'webapp', 'webapplocation')},
            },
            bases=(nginx.models.PathParametersMixin, models.Model),
        ),
    ]
